const words = require('./words');
const { setSession, decreaseAttempts, getSession, deleteSession, setLoss } = require('./db');
const { ATTEMPTS_COUNT, API_VERSION } = require('./constants');
const { startWords, correctAnswer, wrongAnswer } = require('./phrases');
const { random } = require('lodash');

const WORDS_COUNT = words.length - 1;

const getWord = () => words[random(WORDS_COUNT)];
const getRandomPhrase = arr => arr[random(arr.length - 1)];

const getNoun = (number, one, two, five) => {
  let n = Math.abs(number);
  n %= 100;
  if (n >= 5 && n <= 20) {
    return five;
  }
  n %= 10;
  if (n === 1) {
    return one;
  }
  if (n >= 2 && n <= 4) {
    return two;
  }
  return five;
};

// eslint-disable-next-line camelcase
const sendJson = (res, session, { text, tts, buttons, end_session = false }) => {
  res.json({
    version: API_VERSION,
    session,
    response: {
      text,
      tts,
      end_session,
      buttons,
    },
  });
};

exports.onStart = (res, session) => {
  const firstWord = getRandomPhrase(startWords);
  const word = getWord();

  setSession(session.session_id, {
    attempts: ATTEMPTS_COUNT,
    word,
  });

  sendJson(res, session, {
    text: `${firstWord} –í–∞–º –Ω—É–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ –º–æ–µ–º —Å–ª–æ–≤–µ. –ï—Å–ª–∏ –æ—à–∏–±–µ—Ç–µ—Å—å 3 —Ä–∞–∑–∞ ‚Äì –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É, —Å–∫–∞–∂–∏—Ç–µ ¬´—Ö–≤–∞—Ç–∏—Ç¬ª. \n–°–ª—É—à–∞–π—Ç–µ –º–æ—ë –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: üëÇ`,
    tts: `${firstWord} - - - –í–∞–º –Ω—É–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ –º–æ–µ–º —Å–ª–æ–≤–µ. - –ï—Å–ª–∏ –æ—à–∏–±–µ—Ç–µ—Å—å 3 —Ä–∞–∑–∞ - ‚Äî - –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! - - –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É, —Å–∫–∞–∂–∏—Ç–µ ¬´—Ö–≤–∞—Ç–∏—Ç¬ª. - - - –°–ª—É—à–∞–π—Ç–µ –º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: - - - ${word}`,
  });
};

exports.onDone = (res, session) => {
  deleteSession(session.session_id);

  sendJson(res, session, {
    text: '–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –µ—â–µ –ø–æ–∏–≥—Ä–∞—Ç—å, —Å–∫–∞–∂–∏—Ç–µ ¬´–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –¥–ª–∏–Ω—É —Å–ª–æ–≤¬ª',
    tts: '–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –µ—â–µ –ø–æ–∏–≥—Ä–∞—Ç—å, —Å–∫–∞–∂–∏—Ç–µ ¬´–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –¥–ª–∏–Ω—É —Å–ª–æ–≤¬ª',
    end_session: true,
  });
};

exports.onUnknown = (res, session) => {
  sendJson(res, session, {
    text: '–ù–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.',
    tts: '–ù–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å, –ø–æ–∂+–∞–ª—É—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.',
  });
};

exports.onCorrect = (res, session) => {
  const firstPhrase = getRandomPhrase(correctAnswer.firstPhrases);
  const secondPhrase = getRandomPhrase(correctAnswer.secondPhrases);
  const thirdPhrase = getRandomPhrase(correctAnswer.thirdPhrases);
  const word = getWord();

  setSession(session.session_id, {
    attempts: ATTEMPTS_COUNT,
    word,
  });

  sendJson(res, session, {
    text: `${firstPhrase} ${secondPhrase} ${thirdPhrase}: üëÇ`,
    tts: `${firstPhrase} - - - ${secondPhrase} - - ${thirdPhrase}: - - - ${word}`,
  });
};

exports.onWrong = (res, session) => {
  const sessionId = session.session_id;
  decreaseAttempts(sessionId);

  const { attempts, word } = getSession(sessionId);

  if (attempts > 0) {
    const firstPhrase = getRandomPhrase(wrongAnswer.firstPhrases);

    sendJson(res, session, {
      text: `${firstPhrase}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É –≤–∞—Å ${wrongAnswer.attemptsPhrases[attempts]}`,
      tts: `${firstPhrase}, - - - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, - - —É –≤–∞—Å ${wrongAnswer.attemptsPhrases[attempts]}`,
    });
  } else {
    setLoss(sessionId);

    sendJson(res, session, {
      text: `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —Å–ª–æ–≤–µ ¬´${word}¬ª - ${word.length} ${getNoun(word.length, '–±—É–∫–≤–∞', '–±—É–∫–≤—ã', '–±—É–∫–≤')}. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?`,
      tts: `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! - –í —Å–ª–æ–≤–µ ¬´${word}¬ª - - ${word.length} ${getNoun(word.length, '–±—É–∫–≤–∞', '–±—É–∫–≤—ã', '–±—É–∫–≤')}. - - –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?`,
      buttons: [
        {
          title: '–î–∞',
          hide: true,
        },
        {
          title: '–ù–µ—Ç',
          hide: true,
        },
      ],
    });
  }
};
